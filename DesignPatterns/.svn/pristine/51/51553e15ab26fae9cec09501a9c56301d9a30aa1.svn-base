package com.eclipse.patterns;

/**
 * A Builder pattern is somewhat like an Abstract Factory pattern in that both
return classes made up of a number of methods and objects. The main
difference is that while the Abstract Factory returns a family of related
classes, the Builder constructs a complex object step by step depending on the
data presented to it.
 * 
 * Suppose we don¡¯t want just a computing algorithm, but a whole
different user interface depending on the data we need to display.
 * 
 * The Builder Pattern assembles a number of objects, such as display widgets, 
 * in various ways depending on the data. Furthermore, since Java is one of the few
languages where you can cleanly separate the data from the display methods
into simple objects, Java is the ideal language to implement Builder patterns.
 * 
 * */

/**Product and Part are struct like class.
 * They could be interface, it depends.*/
class Product{
	Part partA=null;
	Part partB=null;
	Part partC=null;
}


class Part{
	String partName=null;
}

interface iBuilder{
	/*build partA, partB, partC*/
	void buildPartA();
	void buildPartB();
	void buildPartC();
	
	/*return the result of the construction.*/
	Product getResult();
}

class Director{
	private iBuilder builder;
	
	public Director(iBuilder builder){
		this.builder = builder;
	}
	
	/*the real process building Parts of the product
	 *and build the product */
	public void construct(){
		builder.buildPartA();
		builder.buildPartB();
		builder.buildPartC();
	}
}

class ConcreteBuilder implements iBuilder{
	Part partA;
	Part partB;
	Part partC;
	
	public void buildPartA(){
		///TODO: add the detailed process to build part A
		System.out.println("Detailed process to build part A");
	};
	
	public void buildPartB(){
		///TODO: add the detailed process to build part B
		System.out.println("Detailed process to build part B");
	};
	
	public void buildPartC(){
		///TODO: add the detailed process to build part C
		System.out.println("Detailed process to build part C");
	};
	
	public Product getResult(){
		///return what is built in construct process.
		System.out.println("Product is not built here," +
				" just return an existing product constitute of Part ABC.");
		return new Product();
	};
}//end of ConcreteBuilder class

public class Builder {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		ConcreteBuilder builder = new ConcreteBuilder();
		Director director = new Director(builder);
		director.construct();
		Product product = builder.getResult();
	}
}//end of Builder class






